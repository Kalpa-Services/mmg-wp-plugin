name: PHPUnit Tests

on: [push, pull_request]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping --silent" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup WordPress Test Suite
      run: |
        mkdir -p /home/runner/wordpress-tests
        cd /home/runner/wordpress-tests
        git clone --depth=1 https://github.com/WordPress/wordpress-develop.git
        cd wordpress-develop
        composer install
        cp wp-tests-config-sample.php wp-tests-config.php
        sed -i "s/youremptytestdbnamehere/wordpress_test/g" wp-tests-config.php
        sed -i "s/yourusernamehere/root/g" wp-tests-config.php
        sed -i "s/yourpasswordhere/rootpassword/g" wp-tests-config.php
        sed -i "s/localhost/127.0.0.1/g" wp-tests-config.php
        echo "WordPress Test Suite setup completed"
      env:
        WP_TESTS_PATH: /home/runner/wordpress-tests/wordpress-develop/tests/phpunit

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
        extensions: mbstring, intl, mysqli, zip
        tools: composer:v2

    - name: Update Composer dependencies
      run: |
        composer config --no-plugins allow-plugins.composer/installers true
        composer config --no-plugins allow-plugins.automattic/jetpack-autoloader true
        composer update --no-interaction --no-progress
        composer require --dev woocommerce/woocommerce:^5.9.1 --no-interaction --no-progress
        echo "Composer installation complete. Listing vendor directory:"
        ls -R vendor
        echo "Composer autoload files:"
        cat vendor/composer/autoload_psr4.php

    - name: Install WooCommerce
      run: |
        mkdir -p wp-content/plugins
        wget https://downloads.wordpress.org/plugin/woocommerce.5.9.1.zip
        unzip -q -o woocommerce.5.9.1.zip -d wp-content/plugins/
        rm woocommerce.5.9.1.zip
        echo "WooCommerce installation complete. Listing wp-content/plugins directory:"
        ls -R wp-content/plugins

    - name: Check WooCommerce installation
      run: |
        echo "Current directory: $(pwd)"
        echo "Listing vendor directory:"
        ls -R vendor
        if [ -d "wp-content/plugins/woocommerce" ]; then
          echo "WooCommerce found in WordPress plugins directory"
          ls -l wp-content/plugins/woocommerce
        else
          echo "WooCommerce not found in WordPress plugins directory"
          exit 1
        fi

    - name: Run PHPUnit tests
      id: run-tests
      env:
        COMPOSER_PROCESS_TIMEOUT: 0
        COMPOSER_NO_INTERACTION: 1
        COMPOSER_NO_AUDIT: 1
        WP_TESTS_PATH: /home/runner/wordpress-tests/wordpress-develop/tests/phpunit
        WP_PHPUNIT__DIR: /home/runner/wordpress-tests/wordpress-develop/tests/phpunit
        DB_NAME: wordpress_test
        DB_USER: root
        DB_PASSWORD: rootpassword
        DB_HOST: 127.0.0.1
      run: |
        # Wait for MySQL to be ready
        while ! mysqladmin ping -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" --silent 2>/dev/null; do
          echo "Waiting for MySQL to be ready..."
          sleep 2
        done
        # Set WP_PLUGIN_DIR environment variable
        export WP_PLUGIN_DIR=$(pwd)/wp-content/plugins
        # Copy WooCommerce to WordPress test environment
        mkdir -p /home/runner/wordpress-tests/wordpress-develop/src/wp-content/plugins
        cp -r wp-content/plugins/woocommerce /home/runner/wordpress-tests/wordpress-develop/src/wp-content/plugins/
        # Modify bootstrap.php to load, initialize WooCommerce, and create tables
        cat << EOF >> /home/runner/wordpress-tests/wordpress-develop/tests/phpunit/includes/bootstrap.php
        // Load WooCommerce
        require_once '/home/runner/wordpress-tests/wordpress-develop/src/wp-content/plugins/woocommerce/woocommerce.php';
        // Initialize WooCommerce
        \$GLOBALS['woocommerce'] = WC();
        // Ensure WooCommerce is fully loaded
        do_action( 'woocommerce_loaded' );
        // Run WooCommerce installation
        WC_Install::install();
        // Flush rewrite rules
        \$GLOBALS['wp_rewrite']->init();
        flush_rewrite_rules();
        EOF
        # Run PHPUnit tests and save output
        cd /home/runner/wordpress-tests/wordpress-develop
        vendor/bin/phpunit --bootstrap tests/phpunit/includes/bootstrap.php --debug --verbose --configuration phpunit.xml > /home/runner/wordpress-tests/wordpress-develop/phpunit-results.txt
        cat /home/runner/wordpress-tests/wordpress-develop/phpunit-results.txt # Add this line to display the results in the log
        # Check if any tests failed and set output
        if grep -q "FAILURES!" /home/runner/wordpress-tests/wordpress-develop/phpunit-results.txt; then
          echo "tests_failed=true" >> $GITHUB_OUTPUT
        else
          echo "tests_failed=false" >> $GITHUB_OUTPUT
        fi

    - name: List files in current directory
      run: ls -al /home/runner/wordpress-tests/wordpress-develop

    - name: Upload PHPUnit results
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: phpunit-results
        path: /home/runner/wordpress-tests/wordpress-develop/phpunit-results.txt

    - name: Post PHPUnit results as PR comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const phpunitOutput = fs.readFileSync('/home/runner/wordpress-tests/wordpress-develop/phpunit-results.txt', 'utf8');
          const summary = phpunitOutput.split('\n').slice(0, 10).join('\n'); // Get first 10 lines for summary
          const fullReport = '## PHPUnit Test Results\n\n<details><summary>Click to expand full report</summary>\n\n```\n' + phpunitOutput + '\n```\n</details>';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '## PHPUnit Test Summary\n\n```\n' + summary + '\n```\n\n' + fullReport
          });

    - name: Check test results
      if: steps.run-tests.outputs.tests_failed == 'true'
      run: exit 1
